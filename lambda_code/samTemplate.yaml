AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  ApplicationEnvironmentTag:
    Type: String
    Default: development
  ApplicationName:
    Type: String
    Default: pos
  Portfolio:
    Type: String
    Default: rpp
Mappings:
  EnvironmentMap:
    development:
      RestApiName: pos_apigateway_dev
      POSAPINAME: posapikey_dev
    test:
      RestApiName: pos_apigateway_cf_test
      POSAPINAME: posapikey_test
    stage:
      RestApiName: pos_apigateway_cf_stage
      POSAPINAME: posapikey_stage
    production:
      RestApiName: pos_apigateway_cf_prod
      POSAPINAME: posapikey_prod
Resources:
    Stage:
     Type: AWS::ApiGateway::Stage
     Properties:
      DeploymentId: !Ref ApiDeployment
      RestApiId: !Ref AlertsApi
      StageName: !Ref ApplicationEnvironmentTag
      Variables:
              #urlpgrest: !Sub '{{resolve:ssm:/${Portfolio}/${ApplicationEnvironmentTag}/NlbURL:1}}'
        credentials: 'dummy' 
        memberregistration: ''
        ngdi: 'dummy' 
        notification: 'dummy' 
        notificationReport: 'dummy' 

    ApiDeployment:
     Type: AWS::ApiGateway::Deployment
     DependsOn: AlertsApi
     Properties:
      RestApiId: !Ref AlertsApi
      StageName: Default-DND
    AlertsApi:
     Type: AWS::ApiGateway::RestApi
     Properties:
      Name: !FindInMap [EnvironmentMap, !Ref ApplicationEnvironmentTag, RestApiName]
      Description: ALL POS API
      Body:
        swagger: '2.0'
        info:
          title: !Sub /${ApplicationName}
          description: ALL POS API
        schemes:
        - "https"
        basePath: /api
        produces:
        - application/json
        definitions:
          Listing:
           type: object
           properties:
            id:
              type: ApiFirst
              description: Listing ID
            title:
              type: ApiSecond
              description: Title of the listing.
        paths:
              /memb/registration:
                post:
                  consumes:
                  - "application/json"
                  parameters:
                  - name: "Prefer"
                    in: "header"
                    required: true
                    type: "string"
                  - name: "token"
                    in: "header"
                    required: true
                    type: "string"
                  responses:
                    '200':
                      description: "200 response"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                        Access-Control-Allow-Methods:
                          type: "string"
                        Access-Control-Allow-Headers:
                          type: "string"
                    '400':
                      description: "400 response"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                        Access-Control-Allow-Methods:
                          type: "string"
                        Access-Control-Allow-Headers:
                          type: "string"
                  security:
                  - sigv4: []
                  x-amazon-apigateway-request-validator: "Validate query string parameters and\
                    \ headers"
                  x-amazon-apigateway-integration:
                    uri: !Sub
                        - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Stagevariable}/invocations"
                        - Stagevariable: "${stageVariables.memberregistration}"
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Methods: "'*'"
                          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token,Prefer'"
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                      '.*"status": 400.*':
                        statusCode: "400"
                    requestParameters:
                      integration.request.header.Prefer: "method.request.header.Prefer"
                      integration.request.header.token: "method.request.header.token"
                    requestTemplates:
                      application/json: "{\r\n\"customerId\":$input.json('$.customerId'),\r\n\"\
                        partnerName\":$input.json('$.partnerName'),\r\n\"groupId\":$input.json('$.groupId'),\r\
                        \n\"subGroupId\":$input.json('$.subGroupId'),\r\n\"marketType\":$input.json('$.marketType'),\r\
                        \n\"responseTimeFrame\":$input.json('$.responseTimeFrame'),\r\n#set($header3Value=\"\
                        $util.escapeJavaScript($input.params('token'))\")\r\n\"token\":\"$header3Value\"\
                        \r\n}"
                    passthroughBehavior: "when_no_templates"
                    httpMethod: "POST"
                    contentHandling: "CONVERT_TO_TEXT"
                    type: "aws"
                options:
                  consumes:
                  - "application/json"
                  responses:
                    '200':
                      description: "200 response"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                        Access-Control-Allow-Methods:
                          type: "string"
                        Access-Control-Allow-Headers:
                          type: "string"
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS,GET'"
                          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Prefer,token'"
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                    requestTemplates:
                      application/json: "{\"statusCode\": 200}"
                    passthroughBehavior: "when_no_match"
                    type: "mock"
              /prov/services-estimate:
                post:
                  consumes:
                  - "application/json"
                  parameters:
                  - name: "Prefer"
                    in: "header"
                    required: true
                    type: "string"
                  - name: "token"
                    in: "header"
                    required: true
                    type: "string"
                  responses:
                    '200':
                      description: "200 response"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                        Access-Control-Allow-Methods:
                          type: "string"
                        Access-Control-Allow-Headers:
                          type: "string"
                    '400':
                      description: "400 response"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                        Access-Control-Allow-Methods:
                          type: "string"
                        Access-Control-Allow-Headers:
                          type: "string"
                  security:
                  - sigv4: []
                  x-amazon-apigateway-request-validator: "Validate query string parameters and\
                    \ headers"
                  x-amazon-apigateway-integration:
                    uri: !Sub
                        - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Stagevariable}/invocations"
                        - Stagevariable: "${stageVariables.servicesEstimate}"
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Methods: "'*'"
                          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token,Prefer'"
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                      '.*"status": 400.*':
                        statusCode: "400"
                    requestParameters:
                      integration.request.header.Prefer: "method.request.header.Prefer"
                      integration.request.header.token: "method.request.header.token"
                    requestTemplates:
                      application/json: "{\r\n\"customerId\":$input.json('$.customerId'),\r\n\"\
                        partnerName\":$input.json('$.partnerName'),\r\n\"groupId\":$input.json('$.groupId'),\r\
                        \n\"subGroupId\":$input.json('$.subGroupId'),\r\n\"marketType\":$input.json('$.marketType'),\r\
                        \n\"responseTimeFrame\":$input.json('$.responseTimeFrame'),\r\n#set($header3Value=\"\
                        $util.escapeJavaScript($input.params('token'))\")\r\n\"token\":\"$header3Value\"\
                        \r\n}"
                    passthroughBehavior: "when_no_templates"
                    httpMethod: "POST"
                    contentHandling: "CONVERT_TO_TEXT"
                    type: "aws"
                options:
                  consumes:
                  - "application/json"
                  responses:
                    '200':
                      description: "200 response"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                        Access-Control-Allow-Methods:
                          type: "string"
                        Access-Control-Allow-Headers:
                          type: "string"
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS,GET'"
                          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Prefer,token'"
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                    requestTemplates:
                      application/json: "{\"statusCode\": 200}"
                    passthroughBehavior: "when_no_match"
                    type: "mock"
              /prov/services-registration:
                post:
                  consumes:
                  - "application/json"
                  parameters:
                  - name: "Prefer"
                    in: "header"
                    required: true
                    type: "string"
                  - name: "token"
                    in: "header"
                    required: true
                    type: "string"
                  responses:
                    '200':
                      description: "200 response"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                        Access-Control-Allow-Methods:
                          type: "string"
                        Access-Control-Allow-Headers:
                          type: "string"
                    '400':
                      description: "400 response"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                        Access-Control-Allow-Methods:
                          type: "string"
                        Access-Control-Allow-Headers:
                          type: "string"
                  security:
                  - sigv4: []
                  x-amazon-apigateway-request-validator: "Validate query string parameters and\
                    \ headers"
                  x-amazon-apigateway-integration:
                    uri: !Sub
                        - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Stagevariable}/invocations"
                        - Stagevariable: "${stageVariables.registration}"
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Methods: "'*'"
                          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token,Prefer'"
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                      '.*"status": 400.*':
                        statusCode: "400"
                    requestParameters:
                      integration.request.header.Prefer: "method.request.header.Prefer"
                      integration.request.header.token: "method.request.header.token"
                    requestTemplates:
                      application/json: "{\r\n\"customerId\":$input.json('$.customerId'),\r\n\"\
                        partnerName\":$input.json('$.partnerName'),\r\n\"groupId\":$input.json('$.groupId'),\r\
                        \n\"subGroupId\":$input.json('$.subGroupId'),\r\n\"marketType\":$input.json('$.marketType'),\r\
                        \n\"responseTimeFrame\":$input.json('$.responseTimeFrame'),\r\n#set($header3Value=\"\
                        $util.escapeJavaScript($input.params('token'))\")\r\n\"token\":\"$header3Value\"\
                        \r\n}"
                    passthroughBehavior: "when_no_templates"
                    httpMethod: "POST"
                    contentHandling: "CONVERT_TO_TEXT"
                    type: "aws"
                options:
                  consumes:
                  - "application/json"
                  responses:
                    '200':
                      description: "200 response"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                        Access-Control-Allow-Methods:
                          type: "string"
                        Access-Control-Allow-Headers:
                          type: "string"
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS,GET'"
                          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Prefer,token'"
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                    requestTemplates:
                      application/json: "{\"statusCode\": 200}"
                    passthroughBehavior: "when_no_match"
                    type: "mock"
        securityDefinitions:
          sigv4:
            type: "apiKey"
            name: "Authorization"
            in: "header"
            x-amazon-apigateway-authtype: "awsSigv4"
          api_key:
            type: "apiKey"
            name: "x-api-key"
            in: "header"
        x-amazon-apigateway-documentation:
              version: "2.1"
              createdDate: "2018-10-26T15:32:59Z"
              documentationParts:
              - location:
                  type: "API"
                properties:
                  info:
                    description: "ALL NEXTGEN API"
              - location:
                  type: "RESPONSE"
                  path: "/prov/status"
                  method: "POST"
                  statusCode: "200"
                properties:
                  description: "200 response"
              - location:
                  type: "RESPONSE"
                  path: "/prov"
                  method: "GET"
                  statusCode: "200"
                properties:
                  description: "200 response"
              - location:
                  type: "RESPONSE"
                  path: "/credentials"
                  method: "GET"
                  statusCode: "200"
                properties:
                  description: "retrieved clients"
                  #- location:
                  #    type: "RESPONSE"
                  #    path: "/customer/cummins-support"
                  #    method: "GET"
                  #    statusCode: "200"
                  #  properties:
                  #    description: "200 response"
              - location:
                  type: "RESPONSE"
                  path: "/lov"
                  method: "GET"
                  statusCode: "200"
                properties:
                  description: "200 response"
              - location:
                  type: "RESPONSE"
                  path: "/lov"
                  method: "OPTIONS"
                  statusCode: "200"
                properties:
                  description: "200 response"
              - location:
                  type: "RESPONSE"
                  path: "/ngdi"
                  method: "POST"
                  statusCode: "200"
                properties:
                  description: "200 response"
              - location:
                  type: "RESPONSE"
                  path: "/saml"
                  method: "OPTIONS"
                  statusCode: "200"
                properties:
                  description: "200 response"
              - location:
                  type: "RESPONSE"
                  path: "/saml"
                  method: "POST"
                  statusCode: "302"
                properties:
                  description: "302 response"
              - location:
                  type: "RESPONSE"
                  path: "/user"
                  method: "GET"
                  statusCode: "200"
                properties:
                  description: "200 response"
              - location:
                  type: "RESPONSE"
                  path: "/user"
                  method: "OPTIONS"
                  statusCode: "200"
                properties:
                  description: "200 response"
        x-amazon-apigateway-gateway-responses:
              DEFAULT_5XX:
                statusCode: 500
                responseParameters:
                  gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
                  gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                responseTemplates:
                  application/json: "{\"message\":$context.error.messageString}"
              INTEGRATION_TIMEOUT:
                statusCode: 504
                responseTemplates:
                  application/json: "{\"message\":$context.error.messageString}"
              DEFAULT_4XX:
                responseParameters:
                  gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                  gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
                  gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                responseTemplates:
                  application/json: "{\"message\":$context.error.messageString}"
              INTEGRATION_TIMEOUT:
                statusCode: 504
                responseTemplates:
                  application/json: "{\"message\":$context.error.messageString}"
        x-amazon-apigateway-request-validators:
              Validate query string parameters and headers:
                validateRequestParameters: true
                validateRequestBody: false


